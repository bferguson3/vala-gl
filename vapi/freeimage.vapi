/* freeimage.vapi generated by vapigen, do not modify. */

/* FreeImage Vala Bindings
 * Copyright (c) 2022 Ben Ferguson <ferguson dot ben86 at gmail>
 *   Created from 3.18.0
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

[CCode (cprefix = "FreeImage", gir_namespace = "FreeImage", lower_case_cprefix = "FreeImage_")]
namespace FreeImage {
	[CCode (cheader_filename = "FreeImage.h", cname = "PBITMAPINFO", has_type_id = false)]
	[Compact]
	public class PBITMAPINFO {
	}
	[CCode (cheader_filename = "FreeImage.h", cname = "PBITMAPINFOHEADER", has_type_id = false)]
	[Compact]
	public class PBITMAPINFOHEADER {
	}
	[CCode (cheader_filename = "FreeImage.h", cname = "BITMAPINFO", has_type_id = false)]
	public struct BITMAPINFO {
		public FreeImage.BITMAPINFOHEADER bmiHeader;
		[CCode (array_length = false)]
		public weak FreeImage.RGBQUAD bmiColors[1];
	}
	[CCode (cheader_filename = "FreeImage.h", cname = "BITMAPINFOHEADER", has_type_id = false)]
	public struct BITMAPINFOHEADER {
		public FreeImage.DWORD biSize;
		public FreeImage.LONG biWidth;
		public FreeImage.LONG biHeight;
		public FreeImage.WORD biPlanes;
		public FreeImage.WORD biBitCount;
		public FreeImage.DWORD biCompression;
		public FreeImage.DWORD biSizeImage;
		public FreeImage.LONG biXPelsPerMeter;
		public FreeImage.LONG biYPelsPerMeter;
		public FreeImage.DWORD biClrUsed;
		public FreeImage.DWORD biClrImportant;
	}
	[CCode (cheader_filename = "FreeImage.h", cname = "BOOL")]
	[SimpleType]
	public struct BOOL : int32 {
	}
	[CCode (cheader_filename = "FreeImage.h", cname = "BYTE")]
	[SimpleType]
	public struct BYTE : uint8 {
	}
	[CCode (cheader_filename = "FreeImage.h", cname = "DWORD")]
	[SimpleType]
	public struct DWORD : uint32 {
	}
	[CCode (cheader_filename = "FreeImage.h", cname = "FIBITMAP", has_type_id = false)]
	public struct FIBITMAP {
		public void* data;
	}
	[CCode (cheader_filename = "FreeImage.h", cname = "FICOMPLEX", has_type_id = false)]
	public struct FICOMPLEX {
		public double r;
		public double i;
	}
	[CCode (cheader_filename = "FreeImage.h", cname = "FIICCPROFILE", has_type_id = false)]
	public struct FIICCPROFILE {
		public FreeImage.WORD flags;
		public FreeImage.DWORD size;
		public void* data;
	}
	[CCode (cheader_filename = "FreeImage.h", cname = "FIMEMORY", has_type_id = false)]
	public struct FIMEMORY {
		public void* data;
	}
	[CCode (cheader_filename = "FreeImage.h", cname = "FIMETADATA", has_type_id = false)]
	public struct FIMETADATA {
		public void* data;
	}
	[CCode (cheader_filename = "FreeImage.h", cname = "FIMULTIBITMAP", has_type_id = false)]
	public struct FIMULTIBITMAP {
		public void* data;
	}
	[CCode (cheader_filename = "FreeImage.h", cname = "FIRGB16", has_type_id = false)]
	public struct FIRGB16 {
		public FreeImage.WORD red;
		public FreeImage.WORD green;
		public FreeImage.WORD blue;
	}
	[CCode (cheader_filename = "FreeImage.h", cname = "FIRGBA16", has_type_id = false)]
	public struct FIRGBA16 {
		public FreeImage.WORD red;
		public FreeImage.WORD green;
		public FreeImage.WORD blue;
		public FreeImage.WORD alpha;
	}
	[CCode (cheader_filename = "FreeImage.h", cname = "FIRGBAF", has_type_id = false)]
	public struct FIRGBAF {
		public float red;
		public float green;
		public float blue;
		public float alpha;
	}
	[CCode (cheader_filename = "FreeImage.h", cname = "FIRGBF", has_type_id = false)]
	public struct FIRGBF {
		public float red;
		public float green;
		public float blue;
	}
	[CCode (cheader_filename = "FreeImage.h", cname = "FITAG", has_type_id = false)]
	public struct FITAG {
		public void* data;
	}
	[CCode (cheader_filename = "FreeImage.h", cname = "FREE_IMAGE_COLOR_CHANNEL")]
	[SimpleType]
	public struct FREE_IMAGE_COLOR_CHANNEL : int {
	}
	[CCode (cheader_filename = "FreeImage.h", cname = "FREE_IMAGE_COLOR_TYPE")]
	[SimpleType]
	public struct FREE_IMAGE_COLOR_TYPE : int {
	}
	[CCode (cheader_filename = "FreeImage.h", cname = "FREE_IMAGE_DITHER")]
	[SimpleType]
	public struct FREE_IMAGE_DITHER : int {
	}
	[CCode (cheader_filename = "FreeImage.h", cname = "FREE_IMAGE_FILTER")]
	[SimpleType]
	public struct FREE_IMAGE_FILTER : int {
	}
	[CCode (cheader_filename = "FreeImage.h", cname = "FREE_IMAGE_FORMAT")]
	[SimpleType]
	public struct FREE_IMAGE_FORMAT : int {
	}
	[CCode (cheader_filename = "FreeImage.h", cname = "FREE_IMAGE_JPEG_OPERATION")]
	[SimpleType]
	public struct FREE_IMAGE_JPEG_OPERATION : int {
	}
	[CCode (cheader_filename = "FreeImage.h", cname = "FREE_IMAGE_MDMODEL")]
	[SimpleType]
	public struct FREE_IMAGE_MDMODEL : int {
	}
	[CCode (cheader_filename = "FreeImage.h", cname = "FREE_IMAGE_MDTYPE")]
	[SimpleType]
	public struct FREE_IMAGE_MDTYPE : int {
	}
	[CCode (cheader_filename = "FreeImage.h", cname = "FREE_IMAGE_QUANTIZE")]
	[SimpleType]
	public struct FREE_IMAGE_QUANTIZE : int {
	}
	[CCode (cheader_filename = "FreeImage.h", cname = "FREE_IMAGE_TMO")]
	[SimpleType]
	public struct FREE_IMAGE_TMO : int {
	}
	[CCode (cheader_filename = "FreeImage.h", cname = "FREE_IMAGE_TYPE")]
	[SimpleType]
	public struct FREE_IMAGE_TYPE : int {
	}
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImageIO", has_type_id = false)]
	public struct FreeImageIO {
		public weak FreeImage.FI_ReadProc read_proc;
		public weak FreeImage.FI_WriteProc write_proc;
		public weak FreeImage.FI_SeekProc seek_proc;
		public weak FreeImage.FI_TellProc tell_proc;
	}
	[CCode (cheader_filename = "FreeImage.h", cname = "INT64")]
	[SimpleType]
	public struct INT64 : int64 {
	}
	[CCode (cheader_filename = "FreeImage.h", cname = "LONG")]
	[SimpleType]
	public struct LONG : int32 {
	}
	[CCode (cheader_filename = "FreeImage.h", cname = "Plugin", has_type_id = false)]
	public struct Plugin {
		public weak FreeImage.FI_FormatProc format_proc;
		public weak FreeImage.FI_DescriptionProc description_proc;
		public weak FreeImage.FI_ExtensionListProc extension_proc;
		public weak FreeImage.FI_RegExprProc regexpr_proc;
		public weak FreeImage.FI_OpenProc open_proc;
		public weak FreeImage.FI_CloseProc close_proc;
		public weak FreeImage.FI_PageCountProc pagecount_proc;
		public weak FreeImage.FI_PageCapabilityProc pagecapability_proc;
		public weak FreeImage.FI_SaveProc save_proc;
		public weak FreeImage.FI_ValidateProc validate_proc;
		public weak FreeImage.FI_MimeProc mime_proc;
		public weak FreeImage.FI_SupportsExportBPPProc supports_export_bpp_proc;
		public weak FreeImage.FI_SupportsExportTypeProc supports_export_type_proc;
		public weak FreeImage.FI_SupportsICCProfilesProc supports_icc_profiles_proc;
		public weak FreeImage.FI_SupportsNoPixelsProc supports_no_pixels_proc;
	}
	[CCode (cheader_filename = "FreeImage.h", cname = "RGBQUAD", has_type_id = false)]
	public struct RGBQUAD {
		public FreeImage.BYTE rgbBlue;
		public FreeImage.BYTE rgbGreen;
		public FreeImage.BYTE rgbRed;
		public FreeImage.BYTE rgbReserved;
	}
	[CCode (cheader_filename = "FreeImage.h", cname = "RGBTRIPLE", has_type_id = false)]
	public struct RGBTRIPLE {
		public FreeImage.BYTE rgbtBlue;
		public FreeImage.BYTE rgbtGreen;
		public FreeImage.BYTE rgbtRed;
	}
	[CCode (cheader_filename = "FreeImage.h", cname = "UINT64")]
	[SimpleType]
	public struct UINT64 : uint64 {
	}
	[CCode (cheader_filename = "FreeImage.h", cname = "WORD")]
	[SimpleType]
	public struct WORD : uint16 {
	}
	[CCode (cheader_filename = "FreeImage.h", cname = "fi_handle")]
	[SimpleType]
	public struct fi_handle {
	}
	[CCode (cheader_filename = "FreeImage.h", has_target = false)]
	public delegate void FI_CloseProc (FreeImage.FreeImageIO io, FreeImage.fi_handle handle, void* data);
	[CCode (cheader_filename = "FreeImage.h", has_target = false)]
	public delegate unowned string FI_DescriptionProc ();
	[CCode (cheader_filename = "FreeImage.h", has_target = false)]
	public delegate unowned string FI_ExtensionListProc ();
	[CCode (cheader_filename = "FreeImage.h", has_target = false)]
	public delegate unowned string FI_FormatProc ();
	[CCode (cheader_filename = "FreeImage.h", has_target = false)]
	public delegate void FI_InitProc (FreeImage.Plugin plugin, int format_id);
	[CCode (cheader_filename = "FreeImage.h", has_target = false)]
	public delegate unowned string FI_MimeProc ();
	[CCode (cheader_filename = "FreeImage.h", has_target = false)]
	public delegate void* FI_OpenProc (FreeImage.FreeImageIO io, FreeImage.fi_handle handle, FreeImage.BOOL read);
	[CCode (cheader_filename = "FreeImage.h", has_target = false)]
	public delegate int FI_PageCapabilityProc (FreeImage.FreeImageIO io, FreeImage.fi_handle handle, void* data);
	[CCode (cheader_filename = "FreeImage.h", has_target = false)]
	public delegate int FI_PageCountProc (FreeImage.FreeImageIO io, FreeImage.fi_handle handle, void* data);
	[CCode (cheader_filename = "FreeImage.h", has_target = false)]
	public delegate uint FI_ReadProc (void* buffer, uint size, uint count, FreeImage.fi_handle handle);
	[CCode (cheader_filename = "FreeImage.h", has_target = false)]
	public delegate unowned string FI_RegExprProc ();
	[CCode (cheader_filename = "FreeImage.h", has_target = false)]
	public delegate FreeImage.BOOL FI_SaveProc (FreeImage.FreeImageIO io, FreeImage.FIBITMAP dib, FreeImage.fi_handle handle, int page, int flags, void* data);
	[CCode (cheader_filename = "FreeImage.h", has_target = false)]
	public delegate int FI_SeekProc (FreeImage.fi_handle handle, long offset, int origin);
	[CCode (cheader_filename = "FreeImage.h", has_target = false)]
	public delegate FreeImage.BOOL FI_SupportsExportBPPProc (int bpp);
	[CCode (cheader_filename = "FreeImage.h", has_target = false)]
	public delegate FreeImage.BOOL FI_SupportsExportTypeProc (FreeImage.FREE_IMAGE_TYPE type);
	[CCode (cheader_filename = "FreeImage.h", has_target = false)]
	public delegate FreeImage.BOOL FI_SupportsICCProfilesProc ();
	[CCode (cheader_filename = "FreeImage.h", has_target = false)]
	public delegate FreeImage.BOOL FI_SupportsNoPixelsProc ();
	[CCode (cheader_filename = "FreeImage.h", has_target = false)]
	public delegate long FI_TellProc (FreeImage.fi_handle handle);
	[CCode (cheader_filename = "FreeImage.h", has_target = false)]
	public delegate FreeImage.BOOL FI_ValidateProc (FreeImage.FreeImageIO io, FreeImage.fi_handle handle);
	[CCode (cheader_filename = "FreeImage.h", has_target = false)]
	public delegate uint FI_WriteProc (void* buffer, uint size, uint count, FreeImage.fi_handle handle);
	[CCode (cheader_filename = "FreeImage.h", has_target = false)]
	public delegate void OutputMessageFunction (FreeImage.FREE_IMAGE_FORMAT fif, string msg);
	[CCode (cheader_filename = "FreeImage.h", has_target = false)]
	public delegate void OutputMessageFunctionStdCall (FreeImage.FREE_IMAGE_FORMAT fif, string msg);
	[CCode (cheader_filename = "FreeImage.h", cname = "BMP_DEFAULT")]
	public const int BMP_DEFAULT;
	[CCode (cheader_filename = "FreeImage.h", cname = "BMP_SAVE_RLE")]
	public const int BMP_SAVE_RLE;
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_COLORORDER_BGR")]
	public const int COLORORDER_BGR;
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_COLORORDER_RGB")]
	public const int COLORORDER_RGB;
	[CCode (cheader_filename = "FreeImage.h", cname = "CUT_DEFAULT")]
	public const int CUT_DEFAULT;
	[CCode (cheader_filename = "FreeImage.h", cname = "DDS_DEFAULT")]
	public const int DDS_DEFAULT;
	[CCode (cheader_filename = "FreeImage.h", cname = "EXR_B44")]
	public const int EXR_B44;
	[CCode (cheader_filename = "FreeImage.h", cname = "EXR_DEFAULT")]
	public const int EXR_DEFAULT;
	[CCode (cheader_filename = "FreeImage.h", cname = "EXR_FLOAT")]
	public const int EXR_FLOAT;
	[CCode (cheader_filename = "FreeImage.h", cname = "EXR_LC")]
	public const int EXR_LC;
	[CCode (cheader_filename = "FreeImage.h", cname = "EXR_NONE")]
	public const int EXR_NONE;
	[CCode (cheader_filename = "FreeImage.h", cname = "EXR_PIZ")]
	public const int EXR_PIZ;
	[CCode (cheader_filename = "FreeImage.h", cname = "EXR_PXR24")]
	public const int EXR_PXR24;
	[CCode (cheader_filename = "FreeImage.h", cname = "EXR_ZIP")]
	public const int EXR_ZIP;
	[CCode (cheader_filename = "FreeImage.h", cname = "FALSE")]
	public const int FALSE;
	[CCode (cheader_filename = "FreeImage.h", cname = "FAXG3_DEFAULT")]
	public const int FAXG3_DEFAULT;
	[CCode (cheader_filename = "FreeImage.h", cname = "FI16_555_BLUE_MASK")]
	public const int FI16_555_BLUE_MASK;
	[CCode (cheader_filename = "FreeImage.h", cname = "FI16_555_BLUE_SHIFT")]
	public const int FI16_555_BLUE_SHIFT;
	[CCode (cheader_filename = "FreeImage.h", cname = "FI16_555_GREEN_MASK")]
	public const int FI16_555_GREEN_MASK;
	[CCode (cheader_filename = "FreeImage.h", cname = "FI16_555_GREEN_SHIFT")]
	public const int FI16_555_GREEN_SHIFT;
	[CCode (cheader_filename = "FreeImage.h", cname = "FI16_555_RED_MASK")]
	public const int FI16_555_RED_MASK;
	[CCode (cheader_filename = "FreeImage.h", cname = "FI16_555_RED_SHIFT")]
	public const int FI16_555_RED_SHIFT;
	[CCode (cheader_filename = "FreeImage.h", cname = "FI16_565_BLUE_MASK")]
	public const int FI16_565_BLUE_MASK;
	[CCode (cheader_filename = "FreeImage.h", cname = "FI16_565_BLUE_SHIFT")]
	public const int FI16_565_BLUE_SHIFT;
	[CCode (cheader_filename = "FreeImage.h", cname = "FI16_565_GREEN_MASK")]
	public const int FI16_565_GREEN_MASK;
	[CCode (cheader_filename = "FreeImage.h", cname = "FI16_565_GREEN_SHIFT")]
	public const int FI16_565_GREEN_SHIFT;
	[CCode (cheader_filename = "FreeImage.h", cname = "FI16_565_RED_MASK")]
	public const int FI16_565_RED_MASK;
	[CCode (cheader_filename = "FreeImage.h", cname = "FI16_565_RED_SHIFT")]
	public const int FI16_565_RED_SHIFT;
	[CCode (cheader_filename = "FreeImage.h", cname = "FIF_LOAD_NOPIXELS")]
	public const int FIF_LOAD_NOPIXELS;
	[CCode (cheader_filename = "FreeImage.h", cname = "FIICC_COLOR_IS_CMYK")]
	public const int FIICC_COLOR_IS_CMYK;
	[CCode (cheader_filename = "FreeImage.h", cname = "FIICC_DEFAULT")]
	public const int FIICC_DEFAULT;
	[CCode (cheader_filename = "FreeImage.h", cname = "FI_COLOR_ALPHA_IS_INDEX")]
	public const int FI_COLOR_ALPHA_IS_INDEX;
	[CCode (cheader_filename = "FreeImage.h", cname = "FI_COLOR_FIND_EQUAL_COLOR")]
	public const int FI_COLOR_FIND_EQUAL_COLOR;
	[CCode (cheader_filename = "FreeImage.h", cname = "FI_COLOR_IS_RGBA_COLOR")]
	public const int FI_COLOR_IS_RGBA_COLOR;
	[CCode (cheader_filename = "FreeImage.h", cname = "FI_COLOR_IS_RGB_COLOR")]
	public const int FI_COLOR_IS_RGB_COLOR;
	[CCode (cheader_filename = "FreeImage.h", cname = "FI_COLOR_PALETTE_SEARCH_MASK")]
	public const int FI_COLOR_PALETTE_SEARCH_MASK;
	[CCode (cheader_filename = "FreeImage.h", cname = "FI_RESCALE_DEFAULT")]
	public const int FI_RESCALE_DEFAULT;
	[CCode (cheader_filename = "FreeImage.h", cname = "FI_RESCALE_OMIT_METADATA")]
	public const int FI_RESCALE_OMIT_METADATA;
	[CCode (cheader_filename = "FreeImage.h", cname = "FI_RESCALE_TRUE_COLOR")]
	public const int FI_RESCALE_TRUE_COLOR;
	[CCode (cheader_filename = "FreeImage.h", cname = "FI_RGBA_ALPHA")]
	public const int FI_RGBA_ALPHA;
	[CCode (cheader_filename = "FreeImage.h", cname = "FI_RGBA_ALPHA_MASK")]
	public const int FI_RGBA_ALPHA_MASK;
	[CCode (cheader_filename = "FreeImage.h", cname = "FI_RGBA_ALPHA_SHIFT")]
	public const int FI_RGBA_ALPHA_SHIFT;
	[CCode (cheader_filename = "FreeImage.h", cname = "FI_RGBA_BLUE")]
	public const int FI_RGBA_BLUE;
	[CCode (cheader_filename = "FreeImage.h", cname = "FI_RGBA_BLUE_MASK")]
	public const int FI_RGBA_BLUE_MASK;
	[CCode (cheader_filename = "FreeImage.h", cname = "FI_RGBA_BLUE_SHIFT")]
	public const int FI_RGBA_BLUE_SHIFT;
	[CCode (cheader_filename = "FreeImage.h", cname = "FI_RGBA_GREEN")]
	public const int FI_RGBA_GREEN;
	[CCode (cheader_filename = "FreeImage.h", cname = "FI_RGBA_GREEN_MASK")]
	public const int FI_RGBA_GREEN_MASK;
	[CCode (cheader_filename = "FreeImage.h", cname = "FI_RGBA_GREEN_SHIFT")]
	public const int FI_RGBA_GREEN_SHIFT;
	[CCode (cheader_filename = "FreeImage.h", cname = "FI_RGBA_RED")]
	public const int FI_RGBA_RED;
	[CCode (cheader_filename = "FreeImage.h", cname = "FI_RGBA_RED_MASK")]
	public const int FI_RGBA_RED_MASK;
	[CCode (cheader_filename = "FreeImage.h", cname = "FI_RGBA_RED_SHIFT")]
	public const int FI_RGBA_RED_SHIFT;
	[CCode (cheader_filename = "FreeImage.h", cname = "FI_RGBA_RGB_MASK")]
	public const int FI_RGBA_RGB_MASK;
	[CCode (cheader_filename = "FreeImage.h", cname = "GIF_DEFAULT")]
	public const int GIF_DEFAULT;
	[CCode (cheader_filename = "FreeImage.h", cname = "GIF_LOAD256")]
	public const int GIF_LOAD256;
	[CCode (cheader_filename = "FreeImage.h", cname = "GIF_PLAYBACK")]
	public const int GIF_PLAYBACK;
	[CCode (cheader_filename = "FreeImage.h", cname = "HDR_DEFAULT")]
	public const int HDR_DEFAULT;
	[CCode (cheader_filename = "FreeImage.h", cname = "ICO_DEFAULT")]
	public const int ICO_DEFAULT;
	[CCode (cheader_filename = "FreeImage.h", cname = "ICO_MAKEALPHA")]
	public const int ICO_MAKEALPHA;
	[CCode (cheader_filename = "FreeImage.h", cname = "IFF_DEFAULT")]
	public const int IFF_DEFAULT;
	[CCode (cheader_filename = "FreeImage.h", cname = "J2K_DEFAULT")]
	public const int J2K_DEFAULT;
	[CCode (cheader_filename = "FreeImage.h", cname = "JP2_DEFAULT")]
	public const int JP2_DEFAULT;
	[CCode (cheader_filename = "FreeImage.h", cname = "JPEG_ACCURATE")]
	public const int JPEG_ACCURATE;
	[CCode (cheader_filename = "FreeImage.h", cname = "JPEG_BASELINE")]
	public const int JPEG_BASELINE;
	[CCode (cheader_filename = "FreeImage.h", cname = "JPEG_CMYK")]
	public const int JPEG_CMYK;
	[CCode (cheader_filename = "FreeImage.h", cname = "JPEG_DEFAULT")]
	public const int JPEG_DEFAULT;
	[CCode (cheader_filename = "FreeImage.h", cname = "JPEG_EXIFROTATE")]
	public const int JPEG_EXIFROTATE;
	[CCode (cheader_filename = "FreeImage.h", cname = "JPEG_FAST")]
	public const int JPEG_FAST;
	[CCode (cheader_filename = "FreeImage.h", cname = "JPEG_GREYSCALE")]
	public const int JPEG_GREYSCALE;
	[CCode (cheader_filename = "FreeImage.h", cname = "JPEG_OPTIMIZE")]
	public const int JPEG_OPTIMIZE;
	[CCode (cheader_filename = "FreeImage.h", cname = "JPEG_PROGRESSIVE")]
	public const int JPEG_PROGRESSIVE;
	[CCode (cheader_filename = "FreeImage.h", cname = "JPEG_QUALITYAVERAGE")]
	public const int JPEG_QUALITYAVERAGE;
	[CCode (cheader_filename = "FreeImage.h", cname = "JPEG_QUALITYBAD")]
	public const int JPEG_QUALITYBAD;
	[CCode (cheader_filename = "FreeImage.h", cname = "JPEG_QUALITYGOOD")]
	public const int JPEG_QUALITYGOOD;
	[CCode (cheader_filename = "FreeImage.h", cname = "JPEG_QUALITYNORMAL")]
	public const int JPEG_QUALITYNORMAL;
	[CCode (cheader_filename = "FreeImage.h", cname = "JPEG_QUALITYSUPERB")]
	public const int JPEG_QUALITYSUPERB;
	[CCode (cheader_filename = "FreeImage.h", cname = "JPEG_SUBSAMPLING_411")]
	public const int JPEG_SUBSAMPLING_411;
	[CCode (cheader_filename = "FreeImage.h", cname = "JPEG_SUBSAMPLING_420")]
	public const int JPEG_SUBSAMPLING_420;
	[CCode (cheader_filename = "FreeImage.h", cname = "JPEG_SUBSAMPLING_422")]
	public const int JPEG_SUBSAMPLING_422;
	[CCode (cheader_filename = "FreeImage.h", cname = "JPEG_SUBSAMPLING_444")]
	public const int JPEG_SUBSAMPLING_444;
	[CCode (cheader_filename = "FreeImage.h", cname = "JXR_DEFAULT")]
	public const int JXR_DEFAULT;
	[CCode (cheader_filename = "FreeImage.h", cname = "JXR_LOSSLESS")]
	public const int JXR_LOSSLESS;
	[CCode (cheader_filename = "FreeImage.h", cname = "JXR_PROGRESSIVE")]
	public const int JXR_PROGRESSIVE;
	[CCode (cheader_filename = "FreeImage.h", cname = "KOALA_DEFAULT")]
	public const int KOALA_DEFAULT;
	[CCode (cheader_filename = "FreeImage.h", cname = "LBM_DEFAULT")]
	public const int LBM_DEFAULT;
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_MAJOR_VERSION")]
	public const int MAJOR_VERSION;
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_MINOR_VERSION")]
	public const int MINOR_VERSION;
	[CCode (cheader_filename = "FreeImage.h", cname = "MNG_DEFAULT")]
	public const int MNG_DEFAULT;
	[CCode (cheader_filename = "FreeImage.h", cname = "NULL")]
	public const int NULL;
	[CCode (cheader_filename = "FreeImage.h", cname = "PCD_BASE")]
	public const int PCD_BASE;
	[CCode (cheader_filename = "FreeImage.h", cname = "PCD_BASEDIV16")]
	public const int PCD_BASEDIV16;
	[CCode (cheader_filename = "FreeImage.h", cname = "PCD_BASEDIV4")]
	public const int PCD_BASEDIV4;
	[CCode (cheader_filename = "FreeImage.h", cname = "PCD_DEFAULT")]
	public const int PCD_DEFAULT;
	[CCode (cheader_filename = "FreeImage.h", cname = "PCX_DEFAULT")]
	public const int PCX_DEFAULT;
	[CCode (cheader_filename = "FreeImage.h", cname = "PFM_DEFAULT")]
	public const int PFM_DEFAULT;
	[CCode (cheader_filename = "FreeImage.h", cname = "PICT_DEFAULT")]
	public const int PICT_DEFAULT;
	[CCode (cheader_filename = "FreeImage.h", cname = "PNG_DEFAULT")]
	public const int PNG_DEFAULT;
	[CCode (cheader_filename = "FreeImage.h", cname = "PNG_IGNOREGAMMA")]
	public const int PNG_IGNOREGAMMA;
	[CCode (cheader_filename = "FreeImage.h", cname = "PNG_INTERLACED")]
	public const int PNG_INTERLACED;
	[CCode (cheader_filename = "FreeImage.h", cname = "PNG_Z_BEST_COMPRESSION")]
	public const int PNG_Z_BEST_COMPRESSION;
	[CCode (cheader_filename = "FreeImage.h", cname = "PNG_Z_BEST_SPEED")]
	public const int PNG_Z_BEST_SPEED;
	[CCode (cheader_filename = "FreeImage.h", cname = "PNG_Z_DEFAULT_COMPRESSION")]
	public const int PNG_Z_DEFAULT_COMPRESSION;
	[CCode (cheader_filename = "FreeImage.h", cname = "PNG_Z_NO_COMPRESSION")]
	public const int PNG_Z_NO_COMPRESSION;
	[CCode (cheader_filename = "FreeImage.h", cname = "PNM_DEFAULT")]
	public const int PNM_DEFAULT;
	[CCode (cheader_filename = "FreeImage.h", cname = "PNM_SAVE_ASCII")]
	public const int PNM_SAVE_ASCII;
	[CCode (cheader_filename = "FreeImage.h", cname = "PNM_SAVE_RAW")]
	public const int PNM_SAVE_RAW;
	[CCode (cheader_filename = "FreeImage.h", cname = "PSD_CMYK")]
	public const int PSD_CMYK;
	[CCode (cheader_filename = "FreeImage.h", cname = "PSD_DEFAULT")]
	public const int PSD_DEFAULT;
	[CCode (cheader_filename = "FreeImage.h", cname = "PSD_LAB")]
	public const int PSD_LAB;
	[CCode (cheader_filename = "FreeImage.h", cname = "PSD_NONE")]
	public const int PSD_NONE;
	[CCode (cheader_filename = "FreeImage.h", cname = "PSD_PSB")]
	public const int PSD_PSB;
	[CCode (cheader_filename = "FreeImage.h", cname = "PSD_RLE")]
	public const int PSD_RLE;
	[CCode (cheader_filename = "FreeImage.h", cname = "RAS_DEFAULT")]
	public const int RAS_DEFAULT;
	[CCode (cheader_filename = "FreeImage.h", cname = "RAW_DEFAULT")]
	public const int RAW_DEFAULT;
	[CCode (cheader_filename = "FreeImage.h", cname = "RAW_DISPLAY")]
	public const int RAW_DISPLAY;
	[CCode (cheader_filename = "FreeImage.h", cname = "RAW_HALFSIZE")]
	public const int RAW_HALFSIZE;
	[CCode (cheader_filename = "FreeImage.h", cname = "RAW_PREVIEW")]
	public const int RAW_PREVIEW;
	[CCode (cheader_filename = "FreeImage.h", cname = "RAW_UNPROCESSED")]
	public const int RAW_UNPROCESSED;
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_RELEASE_SERIAL")]
	public const int RELEASE_SERIAL;
	[CCode (cheader_filename = "FreeImage.h", cname = "SEEK_CUR")]
	public const int SEEK_CUR;
	[CCode (cheader_filename = "FreeImage.h", cname = "SEEK_END")]
	public const int SEEK_END;
	[CCode (cheader_filename = "FreeImage.h", cname = "SEEK_SET")]
	public const int SEEK_SET;
	[CCode (cheader_filename = "FreeImage.h", cname = "SGI_DEFAULT")]
	public const int SGI_DEFAULT;
	[CCode (cheader_filename = "FreeImage.h", cname = "TARGA_DEFAULT")]
	public const int TARGA_DEFAULT;
	[CCode (cheader_filename = "FreeImage.h", cname = "TARGA_LOAD_RGB888")]
	public const int TARGA_LOAD_RGB888;
	[CCode (cheader_filename = "FreeImage.h", cname = "TARGA_SAVE_RLE")]
	public const int TARGA_SAVE_RLE;
	[CCode (cheader_filename = "FreeImage.h", cname = "TIFF_ADOBE_DEFLATE")]
	public const int TIFF_ADOBE_DEFLATE;
	[CCode (cheader_filename = "FreeImage.h", cname = "TIFF_CCITTFAX3")]
	public const int TIFF_CCITTFAX3;
	[CCode (cheader_filename = "FreeImage.h", cname = "TIFF_CCITTFAX4")]
	public const int TIFF_CCITTFAX4;
	[CCode (cheader_filename = "FreeImage.h", cname = "TIFF_CMYK")]
	public const int TIFF_CMYK;
	[CCode (cheader_filename = "FreeImage.h", cname = "TIFF_DEFAULT")]
	public const int TIFF_DEFAULT;
	[CCode (cheader_filename = "FreeImage.h", cname = "TIFF_DEFLATE")]
	public const int TIFF_DEFLATE;
	[CCode (cheader_filename = "FreeImage.h", cname = "TIFF_JPEG")]
	public const int TIFF_JPEG;
	[CCode (cheader_filename = "FreeImage.h", cname = "TIFF_LOGLUV")]
	public const int TIFF_LOGLUV;
	[CCode (cheader_filename = "FreeImage.h", cname = "TIFF_LZW")]
	public const int TIFF_LZW;
	[CCode (cheader_filename = "FreeImage.h", cname = "TIFF_NONE")]
	public const int TIFF_NONE;
	[CCode (cheader_filename = "FreeImage.h", cname = "TIFF_PACKBITS")]
	public const int TIFF_PACKBITS;
	[CCode (cheader_filename = "FreeImage.h", cname = "TRUE")]
	public const int TRUE;
	[CCode (cheader_filename = "FreeImage.h", cname = "WBMP_DEFAULT")]
	public const int WBMP_DEFAULT;
	[CCode (cheader_filename = "FreeImage.h", cname = "WEBP_DEFAULT")]
	public const int WEBP_DEFAULT;
	[CCode (cheader_filename = "FreeImage.h", cname = "WEBP_LOSSLESS")]
	public const int WEBP_LOSSLESS;
	[CCode (cheader_filename = "FreeImage.h", cname = "XBM_DEFAULT")]
	public const int XBM_DEFAULT;
	[CCode (cheader_filename = "FreeImage.h", cname = "XPM_DEFAULT")]
	public const int XPM_DEFAULT;
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_AcquireMemory")]
	public static FreeImage.BOOL AcquireMemory (FreeImage.FIMEMORY stream, FreeImage.BYTE data, FreeImage.DWORD size_in_bytes);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_AdjustBrightness")]
	public static FreeImage.BOOL AdjustBrightness (FreeImage.FIBITMAP dib, double percentage);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_AdjustColors")]
	public static FreeImage.BOOL AdjustColors (FreeImage.FIBITMAP dib, double brightness, double contrast, double gamma, FreeImage.BOOL invert);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_AdjustContrast")]
	public static FreeImage.BOOL AdjustContrast (FreeImage.FIBITMAP dib, double percentage);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_AdjustCurve")]
	public static FreeImage.BOOL AdjustCurve (FreeImage.FIBITMAP dib, FreeImage.BYTE LUT, FreeImage.FREE_IMAGE_COLOR_CHANNEL channel);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_AdjustGamma")]
	public static FreeImage.BOOL AdjustGamma (FreeImage.FIBITMAP dib, double gamma);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_AppendPage")]
	public static void AppendPage (FreeImage.FIMULTIBITMAP bitmap, FreeImage.FIBITMAP data);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_ApplyColorMapping")]
	public static uint ApplyColorMapping (FreeImage.FIBITMAP dib, FreeImage.RGBQUAD srccolors, FreeImage.RGBQUAD dstcolors, uint count, FreeImage.BOOL ignore_alpha, FreeImage.BOOL swap);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_ApplyPaletteIndexMapping")]
	public static uint ApplyPaletteIndexMapping (FreeImage.FIBITMAP dib, FreeImage.BYTE srcindices, FreeImage.BYTE dstindices, uint count, FreeImage.BOOL swap);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_CloneMetadata")]
	public static FreeImage.BOOL CloneMetadata (FreeImage.FIBITMAP dst, FreeImage.FIBITMAP src);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_CloseMemory")]
	public static void CloseMemory (FreeImage.FIMEMORY stream);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_CloseMultiBitmap")]
	public static FreeImage.BOOL CloseMultiBitmap (FreeImage.FIMULTIBITMAP bitmap, int flags);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_ConvertLine16To24_555")]
	public static void ConvertLine16To24_555 (FreeImage.BYTE target, FreeImage.BYTE source, int width_in_pixels);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_ConvertLine16To24_565")]
	public static void ConvertLine16To24_565 (FreeImage.BYTE target, FreeImage.BYTE source, int width_in_pixels);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_ConvertLine16To32_555")]
	public static void ConvertLine16To32_555 (FreeImage.BYTE target, FreeImage.BYTE source, int width_in_pixels);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_ConvertLine16To32_565")]
	public static void ConvertLine16To32_565 (FreeImage.BYTE target, FreeImage.BYTE source, int width_in_pixels);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_ConvertLine16To4_555")]
	public static void ConvertLine16To4_555 (FreeImage.BYTE target, FreeImage.BYTE source, int width_in_pixels);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_ConvertLine16To4_565")]
	public static void ConvertLine16To4_565 (FreeImage.BYTE target, FreeImage.BYTE source, int width_in_pixels);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_ConvertLine16To8_555")]
	public static void ConvertLine16To8_555 (FreeImage.BYTE target, FreeImage.BYTE source, int width_in_pixels);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_ConvertLine16To8_565")]
	public static void ConvertLine16To8_565 (FreeImage.BYTE target, FreeImage.BYTE source, int width_in_pixels);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_ConvertLine16_555_To16_565")]
	public static void ConvertLine16_555_To16_565 (FreeImage.BYTE target, FreeImage.BYTE source, int width_in_pixels);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_ConvertLine16_565_To16_555")]
	public static void ConvertLine16_565_To16_555 (FreeImage.BYTE target, FreeImage.BYTE source, int width_in_pixels);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_ConvertLine1To16_555")]
	public static void ConvertLine1To16_555 (FreeImage.BYTE target, FreeImage.BYTE source, int width_in_pixels, FreeImage.RGBQUAD palette);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_ConvertLine1To16_565")]
	public static void ConvertLine1To16_565 (FreeImage.BYTE target, FreeImage.BYTE source, int width_in_pixels, FreeImage.RGBQUAD palette);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_ConvertLine1To24")]
	public static void ConvertLine1To24 (FreeImage.BYTE target, FreeImage.BYTE source, int width_in_pixels, FreeImage.RGBQUAD palette);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_ConvertLine1To32")]
	public static void ConvertLine1To32 (FreeImage.BYTE target, FreeImage.BYTE source, int width_in_pixels, FreeImage.RGBQUAD palette);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_ConvertLine1To32MapTransparency")]
	public static void ConvertLine1To32MapTransparency (FreeImage.BYTE target, FreeImage.BYTE source, int width_in_pixels, FreeImage.RGBQUAD palette, FreeImage.BYTE table, int transparent_pixels);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_ConvertLine1To4")]
	public static void ConvertLine1To4 (FreeImage.BYTE target, FreeImage.BYTE source, int width_in_pixels);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_ConvertLine1To8")]
	public static void ConvertLine1To8 (FreeImage.BYTE target, FreeImage.BYTE source, int width_in_pixels);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_ConvertLine24To16_555")]
	public static void ConvertLine24To16_555 (FreeImage.BYTE target, FreeImage.BYTE source, int width_in_pixels);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_ConvertLine24To16_565")]
	public static void ConvertLine24To16_565 (FreeImage.BYTE target, FreeImage.BYTE source, int width_in_pixels);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_ConvertLine24To32")]
	public static void ConvertLine24To32 (FreeImage.BYTE target, FreeImage.BYTE source, int width_in_pixels);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_ConvertLine24To4")]
	public static void ConvertLine24To4 (FreeImage.BYTE target, FreeImage.BYTE source, int width_in_pixels);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_ConvertLine24To8")]
	public static void ConvertLine24To8 (FreeImage.BYTE target, FreeImage.BYTE source, int width_in_pixels);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_ConvertLine32To16_555")]
	public static void ConvertLine32To16_555 (FreeImage.BYTE target, FreeImage.BYTE source, int width_in_pixels);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_ConvertLine32To16_565")]
	public static void ConvertLine32To16_565 (FreeImage.BYTE target, FreeImage.BYTE source, int width_in_pixels);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_ConvertLine32To24")]
	public static void ConvertLine32To24 (FreeImage.BYTE target, FreeImage.BYTE source, int width_in_pixels);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_ConvertLine32To4")]
	public static void ConvertLine32To4 (FreeImage.BYTE target, FreeImage.BYTE source, int width_in_pixels);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_ConvertLine32To8")]
	public static void ConvertLine32To8 (FreeImage.BYTE target, FreeImage.BYTE source, int width_in_pixels);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_ConvertLine4To16_555")]
	public static void ConvertLine4To16_555 (FreeImage.BYTE target, FreeImage.BYTE source, int width_in_pixels, FreeImage.RGBQUAD palette);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_ConvertLine4To16_565")]
	public static void ConvertLine4To16_565 (FreeImage.BYTE target, FreeImage.BYTE source, int width_in_pixels, FreeImage.RGBQUAD palette);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_ConvertLine4To24")]
	public static void ConvertLine4To24 (FreeImage.BYTE target, FreeImage.BYTE source, int width_in_pixels, FreeImage.RGBQUAD palette);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_ConvertLine4To32")]
	public static void ConvertLine4To32 (FreeImage.BYTE target, FreeImage.BYTE source, int width_in_pixels, FreeImage.RGBQUAD palette);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_ConvertLine4To32MapTransparency")]
	public static void ConvertLine4To32MapTransparency (FreeImage.BYTE target, FreeImage.BYTE source, int width_in_pixels, FreeImage.RGBQUAD palette, FreeImage.BYTE table, int transparent_pixels);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_ConvertLine4To8")]
	public static void ConvertLine4To8 (FreeImage.BYTE target, FreeImage.BYTE source, int width_in_pixels);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_ConvertLine8To16_555")]
	public static void ConvertLine8To16_555 (FreeImage.BYTE target, FreeImage.BYTE source, int width_in_pixels, FreeImage.RGBQUAD palette);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_ConvertLine8To16_565")]
	public static void ConvertLine8To16_565 (FreeImage.BYTE target, FreeImage.BYTE source, int width_in_pixels, FreeImage.RGBQUAD palette);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_ConvertLine8To24")]
	public static void ConvertLine8To24 (FreeImage.BYTE target, FreeImage.BYTE source, int width_in_pixels, FreeImage.RGBQUAD palette);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_ConvertLine8To32")]
	public static void ConvertLine8To32 (FreeImage.BYTE target, FreeImage.BYTE source, int width_in_pixels, FreeImage.RGBQUAD palette);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_ConvertLine8To32MapTransparency")]
	public static void ConvertLine8To32MapTransparency (FreeImage.BYTE target, FreeImage.BYTE source, int width_in_pixels, FreeImage.RGBQUAD palette, FreeImage.BYTE table, int transparent_pixels);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_ConvertLine8To4")]
	public static void ConvertLine8To4 (FreeImage.BYTE target, FreeImage.BYTE source, int width_in_pixels, FreeImage.RGBQUAD palette);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_ConvertToRawBits")]
	public static void ConvertToRawBits (FreeImage.BYTE bits, FreeImage.FIBITMAP dib, int pitch, uint bpp, uint red_mask, uint green_mask, uint blue_mask, FreeImage.BOOL topdown);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_DeInitialise")]
	public static void DeInitialise ();
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_DeletePage")]
	public static void DeletePage (FreeImage.FIMULTIBITMAP bitmap, int page);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_DeleteTag")]
	public static void DeleteTag (FreeImage.FITAG tag);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_DestroyICCProfile")]
	public static void DestroyICCProfile (FreeImage.FIBITMAP dib);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_FIFSupportsExportBPP")]
	public static FreeImage.BOOL FIFSupportsExportBPP (FreeImage.FREE_IMAGE_FORMAT fif, int bpp);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_FIFSupportsExportType")]
	public static FreeImage.BOOL FIFSupportsExportType (FreeImage.FREE_IMAGE_FORMAT fif, FreeImage.FREE_IMAGE_TYPE type);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_FIFSupportsICCProfiles")]
	public static FreeImage.BOOL FIFSupportsICCProfiles (FreeImage.FREE_IMAGE_FORMAT fif);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_FIFSupportsNoPixels")]
	public static FreeImage.BOOL FIFSupportsNoPixels (FreeImage.FREE_IMAGE_FORMAT fif);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_FIFSupportsReading")]
	public static FreeImage.BOOL FIFSupportsReading (FreeImage.FREE_IMAGE_FORMAT fif);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_FIFSupportsWriting")]
	public static FreeImage.BOOL FIFSupportsWriting (FreeImage.FREE_IMAGE_FORMAT fif);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_FillBackground")]
	public static FreeImage.BOOL FillBackground (FreeImage.FIBITMAP dib, void* color, int options);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_FindCloseMetadata")]
	public static void FindCloseMetadata (FreeImage.FIMETADATA mdhandle);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_FindNextMetadata")]
	public static FreeImage.BOOL FindNextMetadata (FreeImage.FIMETADATA mdhandle, FreeImage.FITAG tag);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_FlipHorizontal")]
	public static FreeImage.BOOL FlipHorizontal (FreeImage.FIBITMAP dib);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_FlipVertical")]
	public static FreeImage.BOOL FlipVertical (FreeImage.FIBITMAP dib);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_GetAdjustColorsLookupTable")]
	public static int GetAdjustColorsLookupTable (FreeImage.BYTE LUT, double brightness, double contrast, double gamma, FreeImage.BOOL invert);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_GetBPP")]
	public static uint GetBPP (FreeImage.FIBITMAP dib);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_GetBackgroundColor")]
	public static FreeImage.BOOL GetBackgroundColor (FreeImage.FIBITMAP dib, FreeImage.RGBQUAD bkcolor);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_GetBits")]
	public static FreeImage.BYTE GetBits (FreeImage.FIBITMAP dib);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_GetBlueMask")]
	public static uint GetBlueMask (FreeImage.FIBITMAP dib);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_GetColorType")]
	public static FreeImage.FREE_IMAGE_COLOR_TYPE GetColorType (FreeImage.FIBITMAP dib);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_GetColorsUsed")]
	public static uint GetColorsUsed (FreeImage.FIBITMAP dib);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_GetCopyrightMessage")]
	public static unowned string GetCopyrightMessage ();
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_GetDIBSize")]
	public static uint GetDIBSize (FreeImage.FIBITMAP dib);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_GetDotsPerMeterX")]
	public static uint GetDotsPerMeterX (FreeImage.FIBITMAP dib);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_GetDotsPerMeterY")]
	public static uint GetDotsPerMeterY (FreeImage.FIBITMAP dib);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_GetFIFCount")]
	public static int GetFIFCount ();
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_GetFIFDescription")]
	public static unowned string GetFIFDescription (FreeImage.FREE_IMAGE_FORMAT fif);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_GetFIFExtensionList")]
	public static unowned string GetFIFExtensionList (FreeImage.FREE_IMAGE_FORMAT fif);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_GetFIFFromFilename")]
	public static FreeImage.FREE_IMAGE_FORMAT GetFIFFromFilename (string filename);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_GetFIFFromFormat")]
	public static FreeImage.FREE_IMAGE_FORMAT GetFIFFromFormat (string format);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_GetFIFFromMime")]
	public static FreeImage.FREE_IMAGE_FORMAT GetFIFFromMime (string mime);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_GetFIFMimeType")]
	public static unowned string GetFIFMimeType (FreeImage.FREE_IMAGE_FORMAT fif);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_GetFIFRegExpr")]
	public static unowned string GetFIFRegExpr (FreeImage.FREE_IMAGE_FORMAT fif);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_GetFileType")]
	public static FreeImage.FREE_IMAGE_FORMAT GetFileType (string filename, int size);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_GetFileTypeFromHandle")]
	public static FreeImage.FREE_IMAGE_FORMAT GetFileTypeFromHandle (FreeImage.FreeImageIO io, FreeImage.fi_handle handle, int size);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_GetFileTypeFromMemory")]
	public static FreeImage.FREE_IMAGE_FORMAT GetFileTypeFromMemory (FreeImage.FIMEMORY stream, int size);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_GetFormatFromFIF")]
	public static unowned string GetFormatFromFIF (FreeImage.FREE_IMAGE_FORMAT fif);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_GetGreenMask")]
	public static uint GetGreenMask (FreeImage.FIBITMAP dib);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_GetHeight")]
	public static uint GetHeight (FreeImage.FIBITMAP dib);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_GetHistogram")]
	public static FreeImage.BOOL GetHistogram (FreeImage.FIBITMAP dib, FreeImage.DWORD histo, FreeImage.FREE_IMAGE_COLOR_CHANNEL channel);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_GetImageType")]
	public static FreeImage.FREE_IMAGE_TYPE GetImageType (FreeImage.FIBITMAP dib);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_GetLine")]
	public static uint GetLine (FreeImage.FIBITMAP dib);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_GetLockedPageNumbers")]
	public static FreeImage.BOOL GetLockedPageNumbers (FreeImage.FIMULTIBITMAP bitmap, int pages, int count);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_GetMemorySize")]
	public static uint GetMemorySize (FreeImage.FIBITMAP dib);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_GetMetadata")]
	public static FreeImage.BOOL GetMetadata (FreeImage.FREE_IMAGE_MDMODEL model, FreeImage.FIBITMAP dib, string key, FreeImage.FITAG tag);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_GetMetadataCount")]
	public static uint GetMetadataCount (FreeImage.FREE_IMAGE_MDMODEL model, FreeImage.FIBITMAP dib);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_GetPageCount")]
	public static int GetPageCount (FreeImage.FIMULTIBITMAP bitmap);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_GetPitch")]
	public static uint GetPitch (FreeImage.FIBITMAP dib);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_GetPixelColor")]
	public static FreeImage.BOOL GetPixelColor (FreeImage.FIBITMAP dib, uint x, uint y, FreeImage.RGBQUAD value);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_GetPixelIndex")]
	public static FreeImage.BOOL GetPixelIndex (FreeImage.FIBITMAP dib, uint x, uint y, FreeImage.BYTE value);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_GetRedMask")]
	public static uint GetRedMask (FreeImage.FIBITMAP dib);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_GetScanLine")]
	public static FreeImage.BYTE GetScanLine (FreeImage.FIBITMAP dib, int scanline);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_GetTagCount")]
	public static FreeImage.DWORD GetTagCount (FreeImage.FITAG tag);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_GetTagDescription")]
	public static unowned string GetTagDescription (FreeImage.FITAG tag);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_GetTagID")]
	public static FreeImage.WORD GetTagID (FreeImage.FITAG tag);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_GetTagKey")]
	public static unowned string GetTagKey (FreeImage.FITAG tag);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_GetTagLength")]
	public static FreeImage.DWORD GetTagLength (FreeImage.FITAG tag);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_GetTagType")]
	public static FreeImage.FREE_IMAGE_MDTYPE GetTagType (FreeImage.FITAG tag);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_GetTagValue")]
	public static void* GetTagValue (FreeImage.FITAG tag);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_GetTransparencyCount")]
	public static uint GetTransparencyCount (FreeImage.FIBITMAP dib);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_GetTransparencyTable")]
	public static FreeImage.BYTE GetTransparencyTable (FreeImage.FIBITMAP dib);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_GetTransparentIndex")]
	public static int GetTransparentIndex (FreeImage.FIBITMAP dib);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_GetVersion")]
	public static unowned string GetVersion ();
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_GetWidth")]
	public static uint GetWidth (FreeImage.FIBITMAP dib);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_HasBackgroundColor")]
	public static FreeImage.BOOL HasBackgroundColor (FreeImage.FIBITMAP dib);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_HasPixels")]
	public static FreeImage.BOOL HasPixels (FreeImage.FIBITMAP dib);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_Initialise")]
	public static void Initialise (FreeImage.BOOL load_local_plugins_only);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_InsertPage")]
	public static void InsertPage (FreeImage.FIMULTIBITMAP bitmap, int page, FreeImage.FIBITMAP data);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_Invert")]
	public static FreeImage.BOOL Invert (FreeImage.FIBITMAP dib);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_IsLittleEndian")]
	public static FreeImage.BOOL IsLittleEndian ();
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_IsPluginEnabled")]
	public static int IsPluginEnabled (FreeImage.FREE_IMAGE_FORMAT fif);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_IsTransparent")]
	public static FreeImage.BOOL IsTransparent (FreeImage.FIBITMAP dib);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_JPEGCrop")]
	public static FreeImage.BOOL JPEGCrop (string src_file, string dst_file, int left, int top, int right, int bottom);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_JPEGTransform")]
	public static FreeImage.BOOL JPEGTransform (string src_file, string dst_file, FreeImage.FREE_IMAGE_JPEG_OPERATION operation, FreeImage.BOOL perfect);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_JPEGTransformCombined")]
	public static FreeImage.BOOL JPEGTransformCombined (string src_file, string dst_file, FreeImage.FREE_IMAGE_JPEG_OPERATION operation, int left, int top, int right, int bottom, FreeImage.BOOL perfect);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_JPEGTransformCombinedFromMemory")]
	public static FreeImage.BOOL JPEGTransformCombinedFromMemory (FreeImage.FIMEMORY src_stream, FreeImage.FIMEMORY dst_stream, FreeImage.FREE_IMAGE_JPEG_OPERATION operation, int left, int top, int right, int bottom, FreeImage.BOOL perfect);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_JPEGTransformFromHandle")]
	public static FreeImage.BOOL JPEGTransformFromHandle (FreeImage.FreeImageIO src_io, FreeImage.fi_handle src_handle, FreeImage.FreeImageIO dst_io, FreeImage.fi_handle dst_handle, FreeImage.FREE_IMAGE_JPEG_OPERATION operation, int left, int top, int right, int bottom, FreeImage.BOOL perfect);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_LookupSVGColor")]
	public static FreeImage.BOOL LookupSVGColor (string szColor, FreeImage.BYTE nRed, FreeImage.BYTE nGreen, FreeImage.BYTE nBlue);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_LookupX11Color")]
	public static FreeImage.BOOL LookupX11Color (string szColor, FreeImage.BYTE nRed, FreeImage.BYTE nGreen, FreeImage.BYTE nBlue);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_MovePage")]
	public static FreeImage.BOOL MovePage (FreeImage.FIMULTIBITMAP bitmap, int target, int source);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_Paste")]
	public static FreeImage.BOOL Paste (FreeImage.FIBITMAP dst, FreeImage.FIBITMAP src, int left, int top, int alpha);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_PreMultiplyWithAlpha")]
	public static FreeImage.BOOL PreMultiplyWithAlpha (FreeImage.FIBITMAP dib);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_ReadMemory")]
	public static uint ReadMemory (void* buffer, uint size, uint count, FreeImage.FIMEMORY stream);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_RegisterExternalPlugin")]
	public static FreeImage.FREE_IMAGE_FORMAT RegisterExternalPlugin (string path, string format, string description, string extension, string regexpr);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_Save")]
	public static FreeImage.BOOL Save (FreeImage.FREE_IMAGE_FORMAT fif, FreeImage.FIBITMAP dib, string filename, int flags);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_SaveMultiBitmapToHandle")]
	public static FreeImage.BOOL SaveMultiBitmapToHandle (FreeImage.FREE_IMAGE_FORMAT fif, FreeImage.FIMULTIBITMAP bitmap, FreeImage.FreeImageIO io, FreeImage.fi_handle handle, int flags);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_SaveMultiBitmapToMemory")]
	public static FreeImage.BOOL SaveMultiBitmapToMemory (FreeImage.FREE_IMAGE_FORMAT fif, FreeImage.FIMULTIBITMAP bitmap, FreeImage.FIMEMORY stream, int flags);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_SaveToHandle")]
	public static FreeImage.BOOL SaveToHandle (FreeImage.FREE_IMAGE_FORMAT fif, FreeImage.FIBITMAP dib, FreeImage.FreeImageIO io, FreeImage.fi_handle handle, int flags);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_SaveToMemory")]
	public static FreeImage.BOOL SaveToMemory (FreeImage.FREE_IMAGE_FORMAT fif, FreeImage.FIBITMAP dib, FreeImage.FIMEMORY stream, int flags);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_SeekMemory")]
	public static FreeImage.BOOL SeekMemory (FreeImage.FIMEMORY stream, long offset, int origin);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_SetBackgroundColor")]
	public static FreeImage.BOOL SetBackgroundColor (FreeImage.FIBITMAP dib, FreeImage.RGBQUAD bkcolor);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_SetChannel")]
	public static FreeImage.BOOL SetChannel (FreeImage.FIBITMAP dst, FreeImage.FIBITMAP src, FreeImage.FREE_IMAGE_COLOR_CHANNEL channel);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_SetComplexChannel")]
	public static FreeImage.BOOL SetComplexChannel (FreeImage.FIBITMAP dst, FreeImage.FIBITMAP src, FreeImage.FREE_IMAGE_COLOR_CHANNEL channel);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_SetDotsPerMeterX")]
	public static void SetDotsPerMeterX (FreeImage.FIBITMAP dib, uint res);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_SetDotsPerMeterY")]
	public static void SetDotsPerMeterY (FreeImage.FIBITMAP dib, uint res);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_SetMetadata")]
	public static FreeImage.BOOL SetMetadata (FreeImage.FREE_IMAGE_MDMODEL model, FreeImage.FIBITMAP dib, string key, FreeImage.FITAG tag);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_SetMetadataKeyValue")]
	public static FreeImage.BOOL SetMetadataKeyValue (FreeImage.FREE_IMAGE_MDMODEL model, FreeImage.FIBITMAP dib, string key, string value);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_SetPixelColor")]
	public static FreeImage.BOOL SetPixelColor (FreeImage.FIBITMAP dib, uint x, uint y, FreeImage.RGBQUAD value);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_SetPixelIndex")]
	public static FreeImage.BOOL SetPixelIndex (FreeImage.FIBITMAP dib, uint x, uint y, FreeImage.BYTE value);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_SetPluginEnabled")]
	public static int SetPluginEnabled (FreeImage.FREE_IMAGE_FORMAT fif, FreeImage.BOOL enable);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_SetTagCount")]
	public static FreeImage.BOOL SetTagCount (FreeImage.FITAG tag, FreeImage.DWORD count);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_SetTagDescription")]
	public static FreeImage.BOOL SetTagDescription (FreeImage.FITAG tag, string description);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_SetTagID")]
	public static FreeImage.BOOL SetTagID (FreeImage.FITAG tag, FreeImage.WORD id);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_SetTagKey")]
	public static FreeImage.BOOL SetTagKey (FreeImage.FITAG tag, string key);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_SetTagLength")]
	public static FreeImage.BOOL SetTagLength (FreeImage.FITAG tag, FreeImage.DWORD length);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_SetTagType")]
	public static FreeImage.BOOL SetTagType (FreeImage.FITAG tag, FreeImage.FREE_IMAGE_MDTYPE type);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_SetTagValue")]
	public static FreeImage.BOOL SetTagValue (FreeImage.FITAG tag, void* value);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_SetThumbnail")]
	public static FreeImage.BOOL SetThumbnail (FreeImage.FIBITMAP dib, FreeImage.FIBITMAP thumbnail);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_SetTransparencyTable")]
	public static void SetTransparencyTable (FreeImage.FIBITMAP dib, FreeImage.BYTE table, int count);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_SetTransparent")]
	public static void SetTransparent (FreeImage.FIBITMAP dib, FreeImage.BOOL enabled);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_SetTransparentIndex")]
	public static void SetTransparentIndex (FreeImage.FIBITMAP dib, int index);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_SwapColors")]
	public static uint SwapColors (FreeImage.FIBITMAP dib, FreeImage.RGBQUAD color_a, FreeImage.RGBQUAD color_b, FreeImage.BOOL ignore_alpha);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_SwapPaletteIndices")]
	public static uint SwapPaletteIndices (FreeImage.FIBITMAP dib, FreeImage.BYTE index_a, FreeImage.BYTE index_b);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_TagToString")]
	public static unowned string TagToString (FreeImage.FREE_IMAGE_MDMODEL model, FreeImage.FITAG tag, string Make);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_TellMemory")]
	public static long TellMemory (FreeImage.FIMEMORY stream);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_Unload")]
	public static void Unload (FreeImage.FIBITMAP dib);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_UnlockPage")]
	public static void UnlockPage (FreeImage.FIMULTIBITMAP bitmap, FreeImage.FIBITMAP data, FreeImage.BOOL changed);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_Validate")]
	public static FreeImage.BOOL Validate (FreeImage.FREE_IMAGE_FORMAT fif, string filename);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_ValidateFromHandle")]
	public static FreeImage.BOOL ValidateFromHandle (FreeImage.FREE_IMAGE_FORMAT fif, FreeImage.FreeImageIO io, FreeImage.fi_handle handle);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_ValidateFromMemory")]
	public static FreeImage.BOOL ValidateFromMemory (FreeImage.FREE_IMAGE_FORMAT fif, FreeImage.FIMEMORY stream);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_WriteMemory")]
	public static uint WriteMemory (void* buffer, uint size, uint count, FreeImage.FIMEMORY stream);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_ZLibCRC32")]
	public static FreeImage.DWORD ZLibCRC32 (FreeImage.DWORD crc, FreeImage.BYTE source, FreeImage.DWORD source_size);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_ZLibCompress")]
	public static FreeImage.DWORD ZLibCompress (FreeImage.BYTE target, FreeImage.DWORD target_size, FreeImage.BYTE source, FreeImage.DWORD source_size);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_ZLibGUnzip")]
	public static FreeImage.DWORD ZLibGUnzip (FreeImage.BYTE target, FreeImage.DWORD target_size, FreeImage.BYTE source, FreeImage.DWORD source_size);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_ZLibGZip")]
	public static FreeImage.DWORD ZLibGZip (FreeImage.BYTE target, FreeImage.DWORD target_size, FreeImage.BYTE source, FreeImage.DWORD source_size);
	[CCode (cheader_filename = "FreeImage.h", cname = "FreeImage_ZLibUncompress")]
	public static FreeImage.DWORD ZLibUncompress (FreeImage.BYTE target, FreeImage.DWORD target_size, FreeImage.BYTE source, FreeImage.DWORD source_size);
}
