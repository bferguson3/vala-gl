/* Emscripten.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "emscripten", gir_namespace = "emscripten", lower_case_cprefix = "emscripten_")]
namespace Emscripten {
	[CCode (cheader_filename = "emscripten.h,em_asm.h", cname = "FILE", has_type_id = false)]
	[Compact]
	public class FILE {
	}
	[CCode (cheader_filename = "emscripten.h")]
	[SimpleType]
	public struct _align1_double : double {
	}
	[CCode (cheader_filename = "emscripten.h")]
	[SimpleType]
	public struct _align1_float : float {
	}
	[CCode (cheader_filename = "emscripten.h")]
	[SimpleType]
	public struct _align1_int : int {
	}
	[CCode (cheader_filename = "emscripten.h")]
	[SimpleType]
	public struct _align1_short : short {
	}
	[CCode (cheader_filename = "emscripten.h")]
	[SimpleType]
	public struct _align2_double : double {
	}
	[CCode (cheader_filename = "emscripten.h")]
	[SimpleType]
	public struct _align2_float : float {
	}
	[CCode (cheader_filename = "emscripten.h")]
	[SimpleType]
	public struct _align2_int : int {
	}
	[CCode (cheader_filename = "emscripten.h")]
	[SimpleType]
	public struct _align4_double : double {
	}
	[CCode (cheader_filename = "emscripten.h", cname = "worker_handle")]
	[SimpleType]
	public struct worker_handle : int {
	}
	[CCode (cheader_filename = "emscripten.h", has_target = false)]
	public delegate void em_arg_callback_func (void* arg0);
	[CCode (cheader_filename = "emscripten.h", has_target = false)]
	public delegate void em_async_wget2_data_onerror_func (uint arg0, void* arg1, int arg2, string arg3);
	[CCode (cheader_filename = "emscripten.h", has_target = false)]
	public delegate void em_async_wget2_data_onload_func (uint arg0, void* arg1, void* arg2, uint arg3);
	[CCode (cheader_filename = "emscripten.h", has_target = false)]
	public delegate void em_async_wget2_data_onprogress_func (uint arg0, void* arg1, int arg2, int arg3);
	[CCode (cheader_filename = "emscripten.h", has_target = false)]
	public delegate void em_async_wget2_onload_func (uint arg0, void* arg1, string arg2);
	[CCode (cheader_filename = "emscripten.h", has_target = false)]
	public delegate void em_async_wget2_onstatus_func (uint arg0, void* arg1, int arg2);
	[CCode (cheader_filename = "emscripten.h", has_target = false)]
	public delegate void em_async_wget_onload_func (void* arg0, void* arg1, int arg2);
	[CCode (cheader_filename = "emscripten.h", has_target = false)]
	public delegate void em_callback_func ();
	[CCode (cheader_filename = "emscripten.h", instance_pos = 1.9)]
	public delegate void em_dlopen_callback (void* handle);
	[CCode (cheader_filename = "emscripten.h", has_target = false)]
	public delegate void em_idb_exists_func (void* arg0, int arg1);
	[CCode (cheader_filename = "emscripten.h", has_target = false)]
	public delegate void em_idb_onload_func (void* arg0, void* arg1, int arg2);
	[CCode (cheader_filename = "emscripten.h", has_target = false)]
	public delegate void em_run_preload_plugins_data_onload_func (void* arg0, string arg1);
	[CCode (cheader_filename = "emscripten.h", has_target = false)]
	public delegate void em_scan_func (void* arg0, void* arg1);
	[CCode (cheader_filename = "emscripten.h", has_target = false)]
	public delegate void em_socket_callback (int fd, void* userData);
	[CCode (cheader_filename = "emscripten.h", has_target = false)]
	public delegate void em_socket_error_callback (int fd, int err, string msg, void* userData);
	[CCode (cheader_filename = "emscripten.h", has_target = false)]
	public delegate void em_str_callback_func (string arg0);
	[CCode (cheader_filename = "emscripten.h", has_target = false)]
	public delegate void em_worker_callback_func (string arg0, int arg1, void* arg2);
	[CCode (cheader_filename = "emscripten.h", cname = "EM_FALSE")]
	public const int EM_FALSE;
	
	[CCode (cheader_filename = "emscripten.h", cname = "EM_ASM")]
	public static void EM_ASM (...);
	[CCode (cheader_filename = "emscripten.h", cname = "EM_ASM_INT")]
	public static int EM_ASM_INT (...);
	[CCode (cheader_filename = "emscripten.h", cname = "EM_ASM_PTR")]
	public static int* EM_ASM_PTR (...);
	[CCode (cheader_filename = "emscripten.h", cname = "EM_ASM_DOUBLE")]
	public static double EM_ASM_DOUBLE (...);
	[CCode (cheader_filename = "emscripten.h", cname = "EM_JS")]
	public static void EM_JS (...);
	
	
	[CCode (cheader_filename = "emscripten.h", cname = "EM_LOG_CONSOLE")]
	public const int EM_LOG_CONSOLE;
	[CCode (cheader_filename = "emscripten.h", cname = "EM_LOG_C_STACK")]
	public const int EM_LOG_C_STACK;
	[CCode (cheader_filename = "emscripten.h", cname = "EM_LOG_DEBUG")]
	public const int EM_LOG_DEBUG;
	[CCode (cheader_filename = "emscripten.h", cname = "EM_LOG_DEMANGLE")]
	public const int EM_LOG_DEMANGLE;
	[CCode (cheader_filename = "emscripten.h", cname = "EM_LOG_ERROR")]
	public const int EM_LOG_ERROR;
	[CCode (cheader_filename = "emscripten.h", cname = "EM_LOG_FUNC_PARAMS")]
	public const int EM_LOG_FUNC_PARAMS;
	[CCode (cheader_filename = "emscripten.h", cname = "EM_LOG_INFO")]
	public const int EM_LOG_INFO;
	[CCode (cheader_filename = "emscripten.h", cname = "EM_LOG_JS_STACK")]
	public const int EM_LOG_JS_STACK;
	[CCode (cheader_filename = "emscripten.h", cname = "EM_LOG_NO_PATHS")]
	public const int EM_LOG_NO_PATHS;
	[CCode (cheader_filename = "emscripten.h", cname = "EM_LOG_WARN")]
	public const int EM_LOG_WARN;
	[CCode (cheader_filename = "emscripten.h", cname = "EM_TIMING_RAF")]
	public const int EM_TIMING_RAF;
	[CCode (cheader_filename = "emscripten.h", cname = "EM_TIMING_SETIMMEDIATE")]
	public const int EM_TIMING_SETIMMEDIATE;
	[CCode (cheader_filename = "emscripten.h", cname = "EM_TIMING_SETTIMEOUT")]
	public const int EM_TIMING_SETTIMEOUT;
	[CCode (cheader_filename = "emscripten.h", cname = "EM_TRUE")]
	public const int EM_TRUE;
	[CCode (cheader_filename = "emscripten.h")]
	public static void async_run_script (string script, int millis);
	[CCode (cheader_filename = "emscripten.h")]
	public static void async_wget2_abort (int handle);
	
	// custom 
	[CCode (cheader_filename = "emscripten.h")]
	public static void set_main_loop(void* func, int fps, int sim_inf);
	
	[CCode (cheader_filename = "emscripten.h")]
	public static void cancel_main_loop ();
	[CCode (cheader_filename = "emscripten.h")]
	public static Emscripten.worker_handle create_worker (string url);
	[CCode (cheader_filename = "emscripten.h")]
	public static void debugger ();
	[CCode (cheader_filename = "emscripten.h")]
	public static void destroy_worker (Emscripten.worker_handle worker);
	[CCode (cheader_filename = "emscripten.h")]
	public static void exit_with_live_runtime ();
	[CCode (cheader_filename = "emscripten.h")]
	public static void force_exit (int status);
	[CCode (cheader_filename = "emscripten.h")]
	public static int get_callstack (int flags, string @out, int maxbytes);
	[CCode (cheader_filename = "emscripten.h")]
	public static void get_canvas_size (int width, int height, int isFullscreen);
	[CCode (cheader_filename = "emscripten.h")]
	public static long get_compiler_setting (string name);
	[CCode (cheader_filename = "emscripten.h")]
	public static double get_device_pixel_ratio ();
	[CCode (cheader_filename = "emscripten.h")]
	public static void get_main_loop_timing (int mode, int value);
	[CCode (cheader_filename = "emscripten.h")]
	public static double get_now ();
	[CCode (cheader_filename = "emscripten.h")]
	public static string get_preloaded_image_data (string path, int w, int h);
	[CCode (cheader_filename = "emscripten.h")]
	public static string get_preloaded_image_data_from_FILE (void* file, int w, int h);
	[CCode (cheader_filename = "emscripten.h")]
	public static void get_screen_size (int width, int height);
	[CCode (cheader_filename = "emscripten.h")]
	public static string get_window_title ();
	[CCode (cheader_filename = "emscripten.h")]
	public static int get_worker_queue_size (Emscripten.worker_handle worker);
	[CCode (cheader_filename = "emscripten.h")]
	public static int has_asyncify ();
	[CCode (cheader_filename = "emscripten.h")]
	public static void hide_mouse ();
	[CCode (cheader_filename = "emscripten.h")]
	public static void idb_delete (string db_name, string file_id, int perror);
	[CCode (cheader_filename = "emscripten.h")]
	public static void idb_exists (string db_name, string file_id, int pexists, int perror);
	[CCode (cheader_filename = "emscripten.h")]
	public static void idb_free_blob (int blob);
	[CCode (cheader_filename = "emscripten.h")]
	public static void idb_load (string db_name, string file_id, void* pbuffer, int pnum, int perror);
	[CCode (cheader_filename = "emscripten.h")]
	public static void idb_load_blob (string db_name, string file_id, int pblob, int perror);
	[CCode (cheader_filename = "emscripten.h")]
	public static void idb_read_from_blob (int blob, int start, int num, void* buffer);
	[CCode (cheader_filename = "emscripten.h")]
	public static void idb_store (string db_name, string file_id, void* buffer, int num, int perror);
	[CCode (cheader_filename = "emscripten.h")]
	public static void idb_store_blob (string db_name, string file_id, void* buffer, int num, int perror);
	[CCode (cheader_filename = "emscripten.h")]
	public static void lazy_load_code ();
	[CCode (cheader_filename = "emscripten.h")]
	public static void pause_main_loop ();
	[CCode (cheader_filename = "emscripten.h")]
	public static int print_double (double x, string to, int max);
	[CCode (cheader_filename = "emscripten.h")]
	public static float random ();
	[CCode (cheader_filename = "emscripten.h")]
	public static void resume_main_loop ();
	[CCode (cheader_filename = "emscripten.h")]
	public static void run_script (string script);
	[CCode (cheader_filename = "emscripten.h")]
	public static int run_script_int (string script);
	[CCode (cheader_filename = "emscripten.h")]
	public static string run_script_string (string script);
	[CCode (cheader_filename = "emscripten.h")]
	public static void set_canvas_size (int width, int height);
	[CCode (cheader_filename = "emscripten.h")]
	public static void set_main_loop_expected_blockers (int num);
	[CCode (cheader_filename = "emscripten.h")]
	public static int set_main_loop_timing (int mode, int value);
	[CCode (cheader_filename = "emscripten.h")]
	public static void set_window_title (string arg0);
	[CCode (cheader_filename = "emscripten.h")]
	public static void sleep (uint ms);
	[CCode (cheader_filename = "emscripten.h")]
	public static void throw_number (double number);
	[CCode (cheader_filename = "emscripten.h")]
	public static void throw_string (string utf8String);
	[CCode (cheader_filename = "emscripten.h")]
	public static void wget (string url, string file);
	[CCode (cheader_filename = "emscripten.h")]
	public static void wget_data (string url, void* pbuffer, int pnum, int perror);
	[CCode (cheader_filename = "emscripten.h")]
	public static void worker_respond (string data, int size);
	[CCode (cheader_filename = "emscripten.h")]
	public static void worker_respond_provisionally (string data, int size);
}
